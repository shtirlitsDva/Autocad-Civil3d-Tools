Polyline:
[TypeDescriptionProvider("Autodesk.AutoCAD.ComponentModel.TypeDescriptionProvider`1[[Autodesk.AutoCAD.DatabaseServices.Polyline, acdbmgd]], acdbmgd")]
[Wrapper("AcDbPolyline")]
public class Polyline : Curve
{
    public Polyline();
    public Polyline(int vertices);
    protected internal Polyline(nint unmanagedObjPtr, bool autoDelete);

    [Category("Geometry")]
    [UnitType(UnitType.Distance)]
    public double Elevation { get; set; }
    [Category("General")]
    [UnitType(UnitType.Distance)]
    public double Thickness { get; set; }
    [Category("Geometry")]
    [UnitType(UnitType.Distance)]
    public double ConstantWidth { get; set; }
    public Vector3d Normal { get; set; }
    public bool IsOnlyLines { get; }
    public int NumberOfVertices { get; }
    public bool HasBulges { get; }
    public bool HasWidth { get; }
    [Category("Geometry")]
    [UnitType(UnitType.Distance)]
    public double Length { get; }
    public bool Plinegen { get; set; }
    public bool Closed { get; set; }

    public void AddVertexAt(int index, Point2d pt, double bulge, double startWidth, double endWidth);
    public void ConvertFrom(Entity entity, bool transferId);
    public Polyline2d ConvertTo(bool transferId);
    public CircularArc2d GetArcSegment2dAt(int index);
    public CircularArc3d GetArcSegmentAt(int index);
    public double GetBulgeAt(int index);
    public double GetEndWidthAt(int index);
    public LineSegment2d GetLineSegment2dAt(int index);
    public LineSegment3d GetLineSegmentAt(int index);
    public Point2d GetPoint2dAt(int index);
    public Point3d GetPoint3dAt(int value);
    public SegmentType GetSegmentType(int index);
    public double GetStartWidthAt(int index);
    public void MaximizeMemory();
    public void MinimizeMemory();
    public virtual bool OnSegmentAt(int index, Point2d pt2d, double value);
    public void RemoveVertexAt(int index);
    public void Reset(bool reuse, int vertices);
    public void SetBulgeAt(int index, double bulge);
    public void SetEndWidthAt(int index, double endWidth);
    public void SetPointAt(int index, Point2d pt);
    public void SetStartWidthAt(int index, double startWidth);
}

[Wrapper("AcDbPolyline::SegType")]
public enum SegmentType
{
    Line = 0,
    Arc = 1,
    Coincident = 2,
    Point = 3,
    Empty = 4
}

Arcs:
[Wrapper("AcGeCircArc2d")]
public sealed class CircularArc2d : Curve2d
{
	public CircularArc2d();
	public CircularArc2d(Point2d center, double radius);
	public CircularArc2d(Point2d startPoint, Point2d point, Point2d endPoint);
	public CircularArc2d(Point2d startPoint, Point2d endPoint, double bulge, bool bulgeFlag);
	public CircularArc2d(Point2d center, double radius, double startAngle, double endAngle, Vector2d referenceVector, bool isClockWise);

	public double StartAngle { get; }
	public double EndAngle { get; }
	public bool IsClockWise { get; }
	public Vector2d ReferenceVector { get; set; }
	public Point2d StartPoint { get; }
	public Point2d EndPoint { get; }
	public double Radius { get; set; }
	public Point2d Center { get; set; }

	public static CircularArc2d Create(nint unmanagedPointer, bool autoDelete);
	public Line2d GetTangent(Point2d point, Tolerance tolerance);
	public Line2d GetTangent(Point2d point);
	public Point2d[] IntersectWith(CircularArc2d arc);
	public Point2d[] IntersectWith(CircularArc2d arc, Tolerance tolerance);
	public Point2d[] IntersectWith(LinearEntity2d line);
	public Point2d[] IntersectWith(LinearEntity2d line, Tolerance tolerance);
	public bool IsInside(Point2d point, Tolerance tolerance);
	public bool IsInside(Point2d point);
	public void Set(Point2d center, double radius);
	public void Set(Point2d startPoint, Point2d point, Point2d endPoint);
	public void Set(Point2d startPoint, Point2d endPoint, double bulge, bool bulgeFlag);
	public void Set(Curve2d curve1, Curve2d curve2, double radius, double parameter1, double parameter2);
	public void Set(Curve2d curve1, Curve2d curve2, Curve2d curve3, double parameter1, double parameter2, double parameter3);
	public void Set(Point2d center, double radius, double angle1, double angle2, Vector2d referenceVector, bool isClockWise);
	public void SetAngles(double startAngle, double endAngle);
	public void SetToComplement();
}

Line segments:

[Wrapper("AcGeLineSeg2d")]
public sealed class LineSegment2d : LinearEntity2d
{
	public LineSegment2d();
	public LineSegment2d(Point2d point, Vector2d vector);
	public LineSegment2d(Point2d point1, Point2d point2);

	public double Length { get; }
	public Point2d EndPoint { get; }
	public Point2d MidPoint { get; }
	public Point2d StartPoint { get; }

	public static LineSegment2d Create(nint unmanagedPointer, bool autoDelete);
	public Point2d BaryComb(double blendCoefficient);
	public Line2d GetBisector();
	public double GetSegmentLength(double fromParameter, double toParameter);
	public double GetSegmentLength(double fromParameter, double toParameter, Tolerance tolerance);
	public void Set(Curve2d curve, Point2d point, double parameter);
	public void Set(Curve2d curve1, Curve2d curve2, double parameter1, double parameter2);
	public void Set(Point2d point1, Point2d point2);
	public void Set(Point2d point, Vector2d vector);
}

[Wrapper("AcGeLinearEnt2d")]
public abstract class LinearEntity2d : Curve2d
{
    public Vector2d Direction { get; }
    public Point2d PointOnLine { get; }

    public static LinearEntity2d Create(nint unmanagedPointer, bool autoDelete);
    public Line2d GetLine();
    public Line2d GetPerpendicularLine(Point2d point);
    public Point2d[] IntersectWith(LinearEntity2d line);
    public Point2d[] IntersectWith(LinearEntity2d line, Tolerance tolerance);
    public bool IsColinearTo(LinearEntity2d line);
    public bool IsColinearTo(LinearEntity2d line, Tolerance tolerance);
    public bool IsParallelTo(LinearEntity2d line);
    public bool IsParallelTo(LinearEntity2d line, Tolerance tolerance);
    public bool IsPerpendicularTo(LinearEntity2d line);
    public bool IsPerpendicularTo(LinearEntity2d line, Tolerance tolerance);
    public LinearEntity2d Overlap(LinearEntity2d line);
    public LinearEntity2d Overlap(LinearEntity2d line, Tolerance tolerance);
}

Common:
public abstract class Curve2d : Entity2d
{
    public BoundBlock2d BoundBlock { get; }
    public bool HasStartPoint { get; }
    public bool HasEndPoint { get; }
    public Point2d StartPoint { get; }
    public Point2d EndPoint { get; }
    public BoundBlock2d OrthoBoundBlock { get; }

    public static Curve2d Create(nint unmanagedPointer, bool autoDelete);
    public Point2d EvaluatePoint(double parameter);
    public Curve2d[] Explode(Interval interval);
    public double GetArea(double startParameter, double endParameter, Tolerance tolerance);
    public double GetArea(double startParameter, double endParameter);
    public BoundBlock2d GetBoundBlockOf(Interval range);
    public PointOnCurve2d[] GetClosestPointTo(Curve2d curve);
    public PointOnCurve2d[] GetClosestPointTo(Curve2d curve, Tolerance tolerance);
    public PointOnCurve2d GetClosestPointTo(Point2d point);
    public PointOnCurve2d GetClosestPointTo(Point2d point, Tolerance tolerance);
    public double GetDistanceTo(Curve2d curve, Tolerance tolerance);
    public double GetDistanceTo(Point2d point);
    public double GetDistanceTo(Point2d point, Tolerance tolerance);
    public double GetDistanceTo(Curve2d curve);
    public Interval GetInterval();
    public double GetLength(double fromParameter, double toParameter, Tolerance tolerance);
    public double GetLength(double fromParameter, double toParameter);
    public PointOnCurve2d GetNormalPoint(Point2d point, Tolerance tolerance);
    public PointOnCurve2d GetNormalPoint(Point2d point);
    public BoundBlock2d GetOrthoBoundBlockOf(Interval range);
    public double GetParameterAtLength(double datumParameter, double length, bool parameterDirection);
    public double GetParameterAtLength(double datumParameter, double length, bool parameterDirection, Tolerance tolerance);
    public double GetParameterOf(Point2d point, Tolerance tolerance);
    public double GetParameterOf(Point2d point);
    public Curve2d GetReverseParameterCurve();
    public Point2d[] GetSamplePoints(int numSample);
    public PointOnCurve2d[] GetSamplePoints(double fromParameter, double toParameter, double approxEps);
    public Curve2d[] GetSplitCurves(double value);
    public Curve2d[] GetTrimmedOffset(double distance, OffsetCurveExtensionType extensionType);
    public Curve2d[] GetTrimmedOffset(double distance, OffsetCurveExtensionType extensionType, Tolerance tolerance);
    public bool IsClosed();
    public bool IsClosed(Tolerance tolerance);
    public bool IsDegenerate(out Entity2d result);
    public bool IsDegenerate(out Entity2d result, Tolerance tolerance);
    public bool IsLinear(out Line2d line);
    public bool IsLinear(out Line2d line, Tolerance tolerance);
    public bool IsOn(Point2d point, Tolerance tolerance);
    public bool IsOn(Point2d point);
    public bool IsOn(Point2d point, out double value, Tolerance tolerance);
    public bool IsOn(Point2d point, out double value);
    public bool IsOn(double parameter, Tolerance tolerance);
    public bool IsOn(double parameter);
    public bool IsPeriodic(out double period);
    public void SetInterval(Interval value);
}

[Wrapper("AcGeEntity2d")]
public abstract class Entity2d : DisposableWrapper, ICloneable
{
    public static Entity2d Create(nint unmanagedPointer, bool autoDelete);
    public virtual object Clone();
    public bool IsEqualTo(Entity2d entity);
    public bool IsEqualTo(Entity2d entity, Tolerance tolerance);
    public bool IsOn(Point2d point);
    public bool IsOn(Point2d point, Tolerance tolerance);
    public void Mirror(Line2d line);
    public void RotateBy(double angle, Point2d point);
    public void ScaleBy(double scaleFactor, Point2d point);
    public void TransformBy(Matrix2d transform);
    public void TranslateBy(Vector2d translateVector);
    protected override void DeleteUnmanagedObject();
}